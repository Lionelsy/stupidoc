{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Tokenizer_1 = __importDefault(require(\"./Tokenizer\"));\n\nvar events_1 = require(\"events\");\n\nvar formTags = new Set([\"input\", \"option\", \"optgroup\", \"select\", \"button\", \"datalist\", \"textarea\"]);\nvar pTag = new Set([\"p\"]);\nvar openImpliesClose = {\n  tr: new Set([\"tr\", \"th\", \"td\"]),\n  th: new Set([\"th\"]),\n  td: new Set([\"thead\", \"th\", \"td\"]),\n  body: new Set([\"head\", \"link\", \"script\"]),\n  li: new Set([\"li\"]),\n  p: pTag,\n  h1: pTag,\n  h2: pTag,\n  h3: pTag,\n  h4: pTag,\n  h5: pTag,\n  h6: pTag,\n  select: formTags,\n  input: formTags,\n  output: formTags,\n  button: formTags,\n  datalist: formTags,\n  textarea: formTags,\n  option: new Set([\"option\"]),\n  optgroup: new Set([\"optgroup\", \"option\"]),\n  dd: new Set([\"dt\", \"dd\"]),\n  dt: new Set([\"dt\", \"dd\"]),\n  address: pTag,\n  article: pTag,\n  aside: pTag,\n  blockquote: pTag,\n  details: pTag,\n  div: pTag,\n  dl: pTag,\n  fieldset: pTag,\n  figcaption: pTag,\n  figure: pTag,\n  footer: pTag,\n  form: pTag,\n  header: pTag,\n  hr: pTag,\n  main: pTag,\n  nav: pTag,\n  ol: pTag,\n  pre: pTag,\n  section: pTag,\n  table: pTag,\n  ul: pTag,\n  rt: new Set([\"rt\", \"rp\"]),\n  rp: new Set([\"rt\", \"rp\"]),\n  tbody: new Set([\"thead\", \"tbody\"]),\n  tfoot: new Set([\"thead\", \"tbody\"])\n};\nvar voidElements = new Set([\"area\", \"base\", \"basefont\", \"br\", \"col\", \"command\", \"embed\", \"frame\", \"hr\", \"img\", \"input\", \"isindex\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]);\nvar foreignContextElements = new Set([\"math\", \"svg\"]);\nvar htmlIntegrationElements = new Set([\"mi\", \"mo\", \"mn\", \"ms\", \"mtext\", \"annotation-xml\", \"foreignObject\", \"desc\", \"title\"]);\nvar reNameEnd = /\\s|\\//;\n\nvar Parser =\n/** @class */\nfunction (_super) {\n  __extends(Parser, _super);\n\n  function Parser(cbs, options) {\n    var _this = _super.call(this) || this;\n\n    _this._tagname = \"\";\n    _this._attribname = \"\";\n    _this._attribvalue = \"\";\n    _this._attribs = null;\n    _this._stack = [];\n    _this._foreignContext = [];\n    _this.startIndex = 0;\n    _this.endIndex = null; // Aliases for backwards compatibility\n\n    _this.parseChunk = Parser.prototype.write;\n    _this.done = Parser.prototype.end;\n    _this._options = options || {};\n    _this._cbs = cbs || {};\n    _this._tagname = \"\";\n    _this._attribname = \"\";\n    _this._attribvalue = \"\";\n    _this._attribs = null;\n    _this._stack = [];\n    _this._foreignContext = [];\n    _this.startIndex = 0;\n    _this.endIndex = null;\n    _this._lowerCaseTagNames = \"lowerCaseTags\" in _this._options ? !!_this._options.lowerCaseTags : !_this._options.xmlMode;\n    _this._lowerCaseAttributeNames = \"lowerCaseAttributeNames\" in _this._options ? !!_this._options.lowerCaseAttributeNames : !_this._options.xmlMode;\n    _this._tokenizer = new (_this._options.Tokenizer || Tokenizer_1.default)(_this._options, _this);\n    if (_this._cbs.onparserinit) _this._cbs.onparserinit(_this);\n    return _this;\n  }\n\n  Parser.prototype._updatePosition = function (initialOffset) {\n    if (this.endIndex === null) {\n      if (this._tokenizer._sectionStart <= initialOffset) {\n        this.startIndex = 0;\n      } else {\n        this.startIndex = this._tokenizer._sectionStart - initialOffset;\n      }\n    } else this.startIndex = this.endIndex + 1;\n\n    this.endIndex = this._tokenizer.getAbsoluteIndex();\n  }; //Tokenizer event handlers\n\n\n  Parser.prototype.ontext = function (data) {\n    this._updatePosition(1); // @ts-ignore\n\n\n    this.endIndex--;\n    if (this._cbs.ontext) this._cbs.ontext(data);\n  };\n\n  Parser.prototype.onopentagname = function (name) {\n    if (this._lowerCaseTagNames) {\n      name = name.toLowerCase();\n    }\n\n    this._tagname = name;\n\n    if (!this._options.xmlMode && name in openImpliesClose) {\n      for (var el = void 0; // @ts-ignore\n      openImpliesClose[name].has(el = this._stack[this._stack.length - 1]); this.onclosetag(el));\n    }\n\n    if (this._options.xmlMode || !voidElements.has(name)) {\n      this._stack.push(name);\n\n      if (foreignContextElements.has(name)) {\n        this._foreignContext.push(true);\n      } else if (htmlIntegrationElements.has(name)) {\n        this._foreignContext.push(false);\n      }\n    }\n\n    if (this._cbs.onopentagname) this._cbs.onopentagname(name);\n    if (this._cbs.onopentag) this._attribs = {};\n  };\n\n  Parser.prototype.onopentagend = function () {\n    this._updatePosition(1);\n\n    if (this._attribs) {\n      if (this._cbs.onopentag) {\n        this._cbs.onopentag(this._tagname, this._attribs);\n      }\n\n      this._attribs = null;\n    }\n\n    if (!this._options.xmlMode && this._cbs.onclosetag && voidElements.has(this._tagname)) {\n      this._cbs.onclosetag(this._tagname);\n    }\n\n    this._tagname = \"\";\n  };\n\n  Parser.prototype.onclosetag = function (name) {\n    this._updatePosition(1);\n\n    if (this._lowerCaseTagNames) {\n      name = name.toLowerCase();\n    }\n\n    if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n      this._foreignContext.pop();\n    }\n\n    if (this._stack.length && (this._options.xmlMode || !voidElements.has(name))) {\n      var pos = this._stack.lastIndexOf(name);\n\n      if (pos !== -1) {\n        if (this._cbs.onclosetag) {\n          pos = this._stack.length - pos; // @ts-ignore\n\n          while (pos--) this._cbs.onclosetag(this._stack.pop());\n        } else this._stack.length = pos;\n      } else if (name === \"p\" && !this._options.xmlMode) {\n        this.onopentagname(name);\n\n        this._closeCurrentTag();\n      }\n    } else if (!this._options.xmlMode && (name === \"br\" || name === \"p\")) {\n      this.onopentagname(name);\n\n      this._closeCurrentTag();\n    }\n  };\n\n  Parser.prototype.onselfclosingtag = function () {\n    if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {\n      this._closeCurrentTag();\n    } else {\n      this.onopentagend();\n    }\n  };\n\n  Parser.prototype._closeCurrentTag = function () {\n    var name = this._tagname;\n    this.onopentagend(); //self-closing tags will be on the top of the stack\n    //(cheaper check than in onclosetag)\n\n    if (this._stack[this._stack.length - 1] === name) {\n      if (this._cbs.onclosetag) {\n        this._cbs.onclosetag(name);\n      }\n\n      this._stack.pop();\n    }\n  };\n\n  Parser.prototype.onattribname = function (name) {\n    if (this._lowerCaseAttributeNames) {\n      name = name.toLowerCase();\n    }\n\n    this._attribname = name;\n  };\n\n  Parser.prototype.onattribdata = function (value) {\n    this._attribvalue += value;\n  };\n\n  Parser.prototype.onattribend = function () {\n    if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);\n\n    if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {\n      this._attribs[this._attribname] = this._attribvalue;\n    }\n\n    this._attribname = \"\";\n    this._attribvalue = \"\";\n  };\n\n  Parser.prototype._getInstructionName = function (value) {\n    var idx = value.search(reNameEnd);\n    var name = idx < 0 ? value : value.substr(0, idx);\n\n    if (this._lowerCaseTagNames) {\n      name = name.toLowerCase();\n    }\n\n    return name;\n  };\n\n  Parser.prototype.ondeclaration = function (value) {\n    if (this._cbs.onprocessinginstruction) {\n      var name_1 = this._getInstructionName(value);\n\n      this._cbs.onprocessinginstruction(\"!\" + name_1, \"!\" + value);\n    }\n  };\n\n  Parser.prototype.onprocessinginstruction = function (value) {\n    if (this._cbs.onprocessinginstruction) {\n      var name_2 = this._getInstructionName(value);\n\n      this._cbs.onprocessinginstruction(\"?\" + name_2, \"?\" + value);\n    }\n  };\n\n  Parser.prototype.oncomment = function (value) {\n    this._updatePosition(4);\n\n    if (this._cbs.oncomment) this._cbs.oncomment(value);\n    if (this._cbs.oncommentend) this._cbs.oncommentend();\n  };\n\n  Parser.prototype.oncdata = function (value) {\n    this._updatePosition(1);\n\n    if (this._options.xmlMode || this._options.recognizeCDATA) {\n      if (this._cbs.oncdatastart) this._cbs.oncdatastart();\n      if (this._cbs.ontext) this._cbs.ontext(value);\n      if (this._cbs.oncdataend) this._cbs.oncdataend();\n    } else {\n      this.oncomment(\"[CDATA[\" + value + \"]]\");\n    }\n  };\n\n  Parser.prototype.onerror = function (err) {\n    if (this._cbs.onerror) this._cbs.onerror(err);\n  };\n\n  Parser.prototype.onend = function () {\n    if (this._cbs.onclosetag) {\n      for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i]));\n    }\n\n    if (this._cbs.onend) this._cbs.onend();\n  }; //Resets the parser to a blank state, ready to parse a new HTML document\n\n\n  Parser.prototype.reset = function () {\n    if (this._cbs.onreset) this._cbs.onreset();\n\n    this._tokenizer.reset();\n\n    this._tagname = \"\";\n    this._attribname = \"\";\n    this._attribs = null;\n    this._stack = [];\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n  }; //Parses a complete HTML document and pushes it to the handler\n\n\n  Parser.prototype.parseComplete = function (data) {\n    this.reset();\n    this.end(data);\n  };\n\n  Parser.prototype.write = function (chunk) {\n    this._tokenizer.write(chunk);\n  };\n\n  Parser.prototype.end = function (chunk) {\n    this._tokenizer.end(chunk);\n  };\n\n  Parser.prototype.pause = function () {\n    this._tokenizer.pause();\n  };\n\n  Parser.prototype.resume = function () {\n    this._tokenizer.resume();\n  };\n\n  return Parser;\n}(events_1.EventEmitter);\n\nexports.Parser = Parser;","map":null,"metadata":{},"sourceType":"script"}